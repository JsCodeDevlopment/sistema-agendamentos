datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  availability  Availability[]
  schedules     Scheduling[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Availability {
  id        String @id @default(uuid())
  weekDay   Int
  startTime Int
  endTime   Int
  userId    String
  user      User   @relation(fields: [userId], references: [id])
}

model Scheduling {
  id        String           @id @default(uuid())
  email     String
  phone     String
  message   String           @db.Text
  status    SchedulingStatus
  userId    String
  user      User             @relation(fields: [userId], references: [id])
  eventId   String
  eventType EventType        @relation(fields: [eventId], references: [id])
}

model EventType {
  id          String       @id @default(uuid())
  name        String
  description String
  schedules   Scheduling[]
}

enum SchedulingStatus {
  PENDING
  ACCEPTED
  REJECTED
  FINISHED
}
